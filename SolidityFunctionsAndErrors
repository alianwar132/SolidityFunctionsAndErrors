// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SchoolGradingSystem {
    address public owner;
    
    struct Student {
        uint256 grade;
        bool exists;
    }

    mapping(address => Student) private students;

    event GradeAdded(address student, uint256 grade);
    event GradeUpdated(address student, uint256 newGrade);

    error NotOwner();
    error StudentNotFound(address student);
    error GradeOutOfRange(uint256 grade);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        if (msg.sender != owner) {
            revert NotOwner();
        }
        _;
    }

    function addGrade(address student, uint256 grade) public onlyOwner {
        if (grade > 100) {
            revert GradeOutOfRange(grade);
        }

        students[student] = Student(grade, true);
        emit GradeAdded(student, grade);
    }

    function updateGrade(address student, uint256 newGrade) public onlyOwner {
        if (!students[student].exists) {
            revert StudentNotFound(student);
        }
        if (newGrade > 100) {
            revert GradeOutOfRange(newGrade);
        }

        students[student].grade = newGrade;
        emit GradeUpdated(student, newGrade);
    }

    function getGrade(address student) public view returns (uint256) {
        if (!students[student].exists) {
            revert StudentNotFound(student);
        }
        return students[student].grade;
    }
}
